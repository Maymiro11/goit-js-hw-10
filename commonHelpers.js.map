{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport izitoast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport errorIcon from '../img/izitoast-icon.svg';\nimport closeIcon from '../img/izitoast-close.svg';\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    const startButton = document.querySelector('[data-start]');\n    const daysElement = document.querySelector('[data-days]');\n    const hoursElement = document.querySelector('[data-hours]');\n    const minutesElement = document.querySelector('[data-minutes]');\n    const secondsElement = document.querySelector('[data-seconds]');\n    const datePicker = document.getElementById('datetime-picker');\n\n    startButton.addEventListener('click', startCountdown);\n\n    let userSelectedDate;\n\n    flatpickr('#datetime-picker', {\n        enableTime: true,\n        time_24hr: true,\n        defaultDate: new Date(),\n        minuteIncrement: 1,\n        onClose(selectedDates) {\n            const selectedDate = selectedDates[0];\n\n            if (selectedDate < new Date()) {\n                startButton.disabled = true;\n                iziToast.show({\n                    title: 'Error',\n                    message: 'Please choose a date in the future',\n                    class: 'error-message',\n                    position: 'topCenter',\n                    titleColor: '#ffffff',\n                    titleSize: '16px',\n                    titleLineHeight: '1.5',\n                    messageColor: '#ffffff',\n                    messageSize: '16px',\n                    messageLineHeight: '1.5',\n                    backgroundColor: '#ef4040',\n                    icon: '',\n                    iconText: '',\n                    iconColor: '#ffffff',\n                    iconUrl: errorIcon ,\n                    image: '',\n                    imageWidth: 50,\n                    timeout: 10000,\n                    close: false,\n                    buttons: [\n                        [\n                        `<button type=\"button\" style=\"background-color: #EF4040\"><img src=${closeIcon}></button>`,\n                        function (instance, toast) {\n                            instance.hide({ transitionOut: 'fadeOut' }, toast);\n                        },\n                        ],\n                    ],\n                    closeOnEscape: true,\n                    pauseOnHover: false,\n                });\n\n            } else {\n                startButton.disabled = false;\n                userSelectedDate = selectedDate;\n            }\n        },\n    });\n\n    function updateTimerDisplay(timeRemaining) {\n        const days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);\n\n        daysElement.textContent = formatTime(days);\n        hoursElement.textContent = formatTime(hours);\n        minutesElement.textContent = formatTime(minutes);\n        secondsElement.textContent = formatTime(seconds);\n    }\n\n    function startCountdown() {\n        const selectedDate = new Date(datePicker.value);\n        const now = new Date();\n\n        const timeRemaining = selectedDate - now;\n        updateTimerDisplay(timeRemaining);\n        setInterval(() => {\n            const currentTimeRemaining = selectedDate - new Date();\n            updateTimerDisplay(currentTimeRemaining);\n        }, 1000);\n    }\n\n    function formatTime(time) {\n        return time < 10 ? `0${time}` : time;\n    }\n});\n\n"],"names":["startButton","daysElement","hoursElement","minutesElement","secondsElement","datePicker","startCountdown","flatpickr","selectedDates","errorIcon","closeIcon","instance","toast","updateTimerDisplay","timeRemaining","days","hours","minutes","seconds","formatTime","selectedDate","currentTimeRemaining","time"],"mappings":"mJAOA,SAAS,iBAAiB,mBAAoB,UAAW,CACrD,MAAMA,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAc,SAAS,cAAc,aAAa,EAClDC,EAAe,SAAS,cAAc,cAAc,EACpDC,EAAiB,SAAS,cAAc,gBAAgB,EACxDC,EAAiB,SAAS,cAAc,gBAAgB,EACxDC,EAAa,SAAS,eAAe,iBAAiB,EAE5DL,EAAY,iBAAiB,QAASM,CAAc,EAIpDC,EAAU,mBAAoB,CAC1B,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACEA,EAAc,CAAC,EAEjB,IAAI,MACnBR,EAAY,SAAW,GACvB,SAAS,KAAK,CACV,MAAO,QACP,QAAS,qCACT,MAAO,gBACP,SAAU,YACV,WAAY,UACZ,UAAW,OACX,gBAAiB,MACjB,aAAc,UACd,YAAa,OACb,kBAAmB,MACnB,gBAAiB,UACjB,KAAM,GACN,SAAU,GACV,UAAW,UACX,QAASS,EACT,MAAO,GACP,WAAY,GACZ,QAAS,IACT,MAAO,GACP,QAAS,CACL,CACA,oEAAoEC,CAAS,aAC7E,SAAUC,EAAUC,EAAO,CACvBD,EAAS,KAAK,CAAE,cAAe,SAAW,EAAEC,CAAK,CACpD,CACA,CACJ,EACD,cAAe,GACf,aAAc,EAClC,CAAiB,GAGDZ,EAAY,SAAW,EAG9B,CACT,CAAK,EAED,SAASa,EAAmBC,EAAe,CACvC,MAAMC,EAAO,KAAK,MAAMD,EAAiB,KAAoB,EACvDE,EAAQ,KAAK,MAAOF,GAAiB,IAAO,GAAK,GAAK,KAAQ,IAAO,GAAK,GAAG,EAC7EG,EAAU,KAAK,MAAOH,GAAiB,IAAO,GAAK,KAAQ,IAAO,GAAG,EACrEI,EAAU,KAAK,MAAOJ,GAAiB,IAAO,IAAO,GAAI,EAE/Db,EAAY,YAAckB,EAAWJ,CAAI,EACzCb,EAAa,YAAciB,EAAWH,CAAK,EAC3Cb,EAAe,YAAcgB,EAAWF,CAAO,EAC/Cb,EAAe,YAAce,EAAWD,CAAO,CAClD,CAED,SAASZ,GAAiB,CACtB,MAAMc,EAAe,IAAI,KAAKf,EAAW,KAAK,EAGxCS,EAAgBM,EAFV,IAAI,KAGhBP,EAAmBC,CAAa,EAChC,YAAY,IAAM,CACd,MAAMO,EAAuBD,EAAe,IAAI,KAChDP,EAAmBQ,CAAoB,CAC1C,EAAE,GAAI,CACV,CAED,SAASF,EAAWG,EAAM,CACtB,OAAOA,EAAO,GAAK,IAAIA,CAAI,GAAKA,CACnC,CACL,CAAC"}